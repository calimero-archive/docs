"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateTranslationFileMessages = exports.mergeTranslations = exports.reportMessage = exports.findAsyncSequential = exports.mapAsyncSequential = exports.readOutputHTMLFile = exports.getPluginI18nPath = exports.getElementsAround = exports.removePrefix = exports.removeSuffix = exports.removeTrailingSlash = exports.addTrailingSlash = exports.addTrailingPathSeparator = exports.addLeadingSlash = exports.resolvePathname = exports.isValidPathname = exports.genChunkName = exports.encodePath = exports.fileToPath = exports.generate = void 0;
const tslib_1 = require("tslib");
const logger_1 = (0, tslib_1.__importDefault)(require("@docusaurus/logger"));
const path_1 = (0, tslib_1.__importDefault)(require("path"));
const crypto_1 = require("crypto");
const lodash_1 = require("lodash");
const fs_extra_1 = (0, tslib_1.__importDefault)(require("fs-extra"));
const url_1 = require("url");
const resolve_pathname_1 = (0, tslib_1.__importDefault)(require("resolve-pathname"));
const hashUtils_1 = require("./hashUtils");
const constants_1 = require("./constants");
(0, tslib_1.__exportStar)(require("./constants"), exports);
(0, tslib_1.__exportStar)(require("./urlUtils"), exports);
(0, tslib_1.__exportStar)(require("./tags"), exports);
(0, tslib_1.__exportStar)(require("./markdownParser"), exports);
(0, tslib_1.__exportStar)(require("./markdownLinks"), exports);
(0, tslib_1.__exportStar)(require("./slugger"), exports);
(0, tslib_1.__exportStar)(require("./pathUtils"), exports);
(0, tslib_1.__exportStar)(require("./hashUtils"), exports);
(0, tslib_1.__exportStar)(require("./globUtils"), exports);
(0, tslib_1.__exportStar)(require("./webpackUtils"), exports);
(0, tslib_1.__exportStar)(require("./dataFileUtils"), exports);
const fileHash = new Map();
async function generate(generatedFilesDir, file, content, skipCache = process.env.NODE_ENV === 'production') {
    const filepath = path_1.default.join(generatedFilesDir, file);
    if (skipCache) {
        await fs_extra_1.default.ensureDir(path_1.default.dirname(filepath));
        await fs_extra_1.default.writeFile(filepath, content);
        return;
    }
    let lastHash = fileHash.get(filepath);
    // If file already exists but its not in runtime cache yet,
    // we try to calculate the content hash and then compare
    // This is to avoid unnecessary overwriting and we can reuse old file.
    if (!lastHash && fs_extra_1.default.existsSync(filepath)) {
        const lastContent = await fs_extra_1.default.readFile(filepath, 'utf8');
        lastHash = (0, crypto_1.createHash)('md5').update(lastContent).digest('hex');
        fileHash.set(filepath, lastHash);
    }
    const currentHash = (0, crypto_1.createHash)('md5').update(content).digest('hex');
    if (lastHash !== currentHash) {
        await fs_extra_1.default.ensureDir(path_1.default.dirname(filepath));
        await fs_extra_1.default.writeFile(filepath, content);
        fileHash.set(filepath, currentHash);
    }
}
exports.generate = generate;
const indexRE = /(^|.*\/)index\.(md|mdx|js|jsx|ts|tsx)$/i;
const extRE = /\.(md|mdx|js|jsx|ts|tsx)$/;
/**
 * Convert filepath to url path.
 * Example: 'index.md' -> '/', 'foo/bar.js' -> '/foo/bar',
 */
function fileToPath(file) {
    if (indexRE.test(file)) {
        return file.replace(indexRE, '/$1');
    }
    return `/${file.replace(extRE, '').replace(/\\/g, '/')}`;
}
exports.fileToPath = fileToPath;
function encodePath(userPath) {
    return userPath
        .split('/')
        .map((item) => encodeURIComponent(item))
        .join('/');
}
exports.encodePath = encodePath;
const chunkNameCache = new Map();
/**
 * Generate unique chunk name given a module path.
 */
function genChunkName(modulePath, prefix, preferredName, shortId = process.env.NODE_ENV === 'production') {
    let chunkName = chunkNameCache.get(modulePath);
    if (!chunkName) {
        if (shortId) {
            chunkName = (0, hashUtils_1.simpleHash)(modulePath, 8);
        }
        else {
            let str = modulePath;
            if (preferredName) {
                const shortHash = (0, hashUtils_1.simpleHash)(modulePath, 3);
                str = `${preferredName}${shortHash}`;
            }
            const name = str === '/' ? 'index' : (0, hashUtils_1.docuHash)(str);
            chunkName = prefix ? `${prefix}---${name}` : name;
        }
        chunkNameCache.set(modulePath, chunkName);
    }
    return chunkName;
}
exports.genChunkName = genChunkName;
function isValidPathname(str) {
    if (!str.startsWith('/')) {
        return false;
    }
    try {
        // weird, but is there a better way?
        const parsedPathname = new url_1.URL(str, 'https://domain.com').pathname;
        return parsedPathname === str || parsedPathname === encodeURI(str);
    }
    catch (e) {
        return false;
    }
}
exports.isValidPathname = isValidPathname;
// resolve pathname and fail fast if resolution fails
function resolvePathname(to, from) {
    return (0, resolve_pathname_1.default)(to, from);
}
exports.resolvePathname = resolvePathname;
function addLeadingSlash(str) {
    return str.startsWith('/') ? str : `/${str}`;
}
exports.addLeadingSlash = addLeadingSlash;
function addTrailingPathSeparator(str) {
    return str.endsWith(path_1.default.sep)
        ? str
        : // If this is Windows, we need to change the forward slash to backward
            `${str.replace(/\/$/, '')}${path_1.default.sep}`;
}
exports.addTrailingPathSeparator = addTrailingPathSeparator;
// TODO deduplicate: also present in @docusaurus/utils-common
function addTrailingSlash(str) {
    return str.endsWith('/') ? str : `${str}/`;
}
exports.addTrailingSlash = addTrailingSlash;
function removeTrailingSlash(str) {
    return removeSuffix(str, '/');
}
exports.removeTrailingSlash = removeTrailingSlash;
function removeSuffix(str, suffix) {
    if (suffix === '') {
        return str; // always returns "" otherwise!
    }
    return str.endsWith(suffix) ? str.slice(0, -suffix.length) : str;
}
exports.removeSuffix = removeSuffix;
function removePrefix(str, prefix) {
    return str.startsWith(prefix) ? str.slice(prefix.length) : str;
}
exports.removePrefix = removePrefix;
function getElementsAround(array, aroundIndex) {
    const min = 0;
    const max = array.length - 1;
    if (aroundIndex < min || aroundIndex > max) {
        throw new Error(`Valid "aroundIndex" for array (of size ${array.length}) are between ${min} and ${max}, but you provided ${aroundIndex}.`);
    }
    const previous = aroundIndex === min ? undefined : array[aroundIndex - 1];
    const next = aroundIndex === max ? undefined : array[aroundIndex + 1];
    return { previous, next };
}
exports.getElementsAround = getElementsAround;
function getPluginI18nPath({ siteDir, locale, pluginName, pluginId = constants_1.DEFAULT_PLUGIN_ID, subPaths = [], }) {
    return path_1.default.join(siteDir, 'i18n', 
    // namespace first by locale: convenient to work in a single folder for a translator
    locale, 
    // Make it convenient to use for single-instance
    // ie: return "docs", not "docs-default" nor "docs/default"
    `${pluginName}${pluginId === constants_1.DEFAULT_PLUGIN_ID ? '' : `-${pluginId}`}`, ...subPaths);
}
exports.getPluginI18nPath = getPluginI18nPath;
/**
 * @param permalink The URL that the HTML file corresponds to, without base URL
 * @param outDir Full path to the output directory
 * @param trailingSlash The site config option. If provided, only one path will be read.
 * @returns This returns a buffer, which you have to decode string yourself if
 * needed. (Not always necessary since the output isn't for human consumption
 * anyways, and most HTML manipulation libs accept buffers)
 */
async function readOutputHTMLFile(permalink, outDir, trailingSlash) {
    const withTrailingSlashPath = path_1.default.join(outDir, permalink, 'index.html');
    const withoutTrailingSlashPath = path_1.default.join(outDir, `${permalink}.html`);
    if (trailingSlash) {
        return fs_extra_1.default.readFile(withTrailingSlashPath);
    }
    else if (trailingSlash === false) {
        return fs_extra_1.default.readFile(withoutTrailingSlashPath);
    }
    else {
        const HTMLPath = await findAsyncSequential([withTrailingSlashPath, withoutTrailingSlashPath], fs_extra_1.default.pathExists);
        if (!HTMLPath) {
            throw new Error(`Expected output HTML file to be found at ${withTrailingSlashPath}`);
        }
        return fs_extra_1.default.readFile(HTMLPath);
    }
}
exports.readOutputHTMLFile = readOutputHTMLFile;
async function mapAsyncSequential(array, action) {
    const results = [];
    // eslint-disable-next-line no-restricted-syntax
    for (const t of array) {
        const result = await action(t);
        results.push(result);
    }
    return results;
}
exports.mapAsyncSequential = mapAsyncSequential;
async function findAsyncSequential(array, predicate) {
    // eslint-disable-next-line no-restricted-syntax
    for (const t of array) {
        if (await predicate(t)) {
            return t;
        }
    }
    return undefined;
}
exports.findAsyncSequential = findAsyncSequential;
function reportMessage(message, reportingSeverity) {
    switch (reportingSeverity) {
        case 'ignore':
            break;
        case 'log':
            logger_1.default.info(message);
            break;
        case 'warn':
            logger_1.default.warn(message);
            break;
        case 'error':
            logger_1.default.error(message);
            break;
        case 'throw':
            throw new Error(message);
        default:
            throw new Error(`Unexpected "reportingSeverity" value: ${reportingSeverity}.`);
    }
}
exports.reportMessage = reportMessage;
function mergeTranslations(contents) {
    return contents.reduce((acc, content) => ({ ...acc, ...content }), {});
}
exports.mergeTranslations = mergeTranslations;
// Useful to update all the messages of a translation file
// Used in tests to simulate translations
function updateTranslationFileMessages(translationFile, updateMessage) {
    return {
        ...translationFile,
        content: (0, lodash_1.mapValues)(translationFile.content, (translation) => ({
            ...translation,
            message: updateMessage(translation.message),
        })),
    };
}
exports.updateTranslationFileMessages = updateTranslationFileMessages;
//# sourceMappingURL=index.js.map